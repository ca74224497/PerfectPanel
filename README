ЗАДАНИЕ # 1:

Исправление запроса (простестировано на данных из дампа БД "test_book.sql").

Версия 1:

SELECT u.ID,
       u.Name,
       b.author AS `Author`,
       GROUP_CONCAT(DISTINCT b.name SEPARATOR ', ') AS `Books`
FROM (SELECT users.id AS `ID`,
             CONCAT(users.first_name, ' ', users.last_name) AS `Name`
      FROM `users`
      WHERE users.id IN (SELECT users.id
                         FROM `users`, `user_books`
                         WHERE users.id = user_books.user_id AND users.age BETWEEN 7 AND 17
                         GROUP BY users.id
                         HAVING COUNT(*) = 2)
     ) AS `u`
         LEFT JOIN `user_books` AS `ub` ON u.ID = ub.user_id
         LEFT JOIN `books` AS `b` ON ub.book_id = b.id
GROUP BY b.author, u.id
HAVING COUNT(*) = 2
ORDER BY b.author ASC

Версия 2 (без JOIN-ов):

SELECT u.ID,
       u.Name,
       b.author AS `Author`,
       GROUP_CONCAT(DISTINCT b.name SEPARATOR ', ') AS `Books`
FROM (SELECT users.id AS `ID`,
             CONCAT(users.first_name, ' ', users.last_name) AS `Name`,
             GROUP_CONCAT(DISTINCT user_books.book_id SEPARATOR ',') AS `Books`
      FROM `users`, `user_books`
      WHERE users.id = user_books.user_id AND users.age BETWEEN 7 AND 17
      GROUP BY users.id
      HAVING COUNT(*) = 2) AS `u`, `books` AS `b`
WHERE FIND_IN_SET(b.id, `Books`)
GROUP BY b.author, u.ID
HAVING COUNT(*) = 2
ORDER BY b.author ASC



ЗАДАНИЕ # 2:

Замечания:
1. "Авторизация не нужна" - убрал авторизацию (удалил из кодовой базы классы AuthContext, SimpleAuth),
теперь доступ к методам API возможен без токена;

2. "Точность подсчета не соблюдена (почитайте про тонкости работы с большими числами в php)" - во всех местах,
связанных с конвертацией, использовал модуль PHP bcmath;

3. "Попробуйте проверить именования переменных/форматирование кода по PSR-12" - поставил модуль PSR-12 для моей IDE
и пропустил все файлы через автоформатер;

4. "Так же стоит учесть правило, 1 класс - 1 файл и структурировать весь код по каталогам и тп" - переработал структуру приложения;

5. "в качестве решения, было бы всем удобно - реализовать окружение с помощью докер контейнера" - упаковал приложение в докер,
залил на Docker Hub (https://hub.docker.com/repository/docker/ca74224497/currency-app).

Как развернуть приложение:
1. Стянуть образ с репозитория: docker pull ca74224497/currency-app:version1;
2. Запустить контейнер: docker run -d --name currency-app -p 8080:80 ca74224497/currency-app:version1.

Приложение доступно по адресу: localhost:8080, пример запроса: "http://localhost:8080/api/v1?method=convert&currency_from=BTC&currency_to=USD&value=1".